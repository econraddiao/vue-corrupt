import "./chunk-VK5M77CT.js";

// node_modules/shave/dist/shave.es.js
function shave(target, maxHeight) {
  var opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  if (typeof maxHeight === "undefined" || isNaN(maxHeight))
    throw Error("maxHeight is required");
  var els = typeof target === "string" ? document.querySelectorAll(target) : target;
  if (!els)
    return;
  var character = opts.character || "&mldr;";
  var classname = opts.classname || "js-shave";
  var spaces = typeof opts.spaces === "boolean" ? opts.spaces : true;
  var charclassname = opts.charclassname || "js-shave-char";
  var charHtml = '<span class="'.concat(charclassname, '">').concat(character, "</span>");
  if (!("length" in els))
    els = [els];
  for (var i = 0; i < els.length; i += 1) {
    var el = els[i];
    var styles = el.style;
    var span = el.querySelector(".".concat(classname));
    var textProp = el.textContent === void 0 ? "innerText" : "textContent";
    if (span) {
      el.removeChild(el.querySelector(".".concat(charclassname)));
      el[textProp] = el[textProp];
    }
    var fullText = el[textProp];
    var words = spaces ? fullText.split(" ") : fullText;
    if (words.length < 2)
      continue;
    var heightStyle = styles.height;
    styles.height = "auto";
    var maxHeightStyle = styles.maxHeight;
    styles.maxHeight = "none";
    if (el.offsetHeight <= maxHeight) {
      styles.height = heightStyle;
      styles.maxHeight = maxHeightStyle;
      continue;
    }
    var max = words.length - 1;
    var min = 0;
    var pivot = void 0;
    while (min < max) {
      pivot = min + max + 1 >> 1;
      el[textProp] = spaces ? words.slice(0, pivot).join(" ") : words.slice(0, pivot);
      el.insertAdjacentHTML("beforeend", charHtml);
      if (el.offsetHeight > maxHeight)
        max = pivot - 1;
      else
        min = pivot;
    }
    el[textProp] = spaces ? words.slice(0, max).join(" ") : words.slice(0, max);
    el.insertAdjacentHTML("beforeend", charHtml);
    var diff = spaces ? " ".concat(words.slice(max).join(" ")) : words.slice(max);
    var shavedText = document.createTextNode(diff);
    var elWithShavedText = document.createElement("span");
    elWithShavedText.classList.add(classname);
    elWithShavedText.style.display = "none";
    elWithShavedText.appendChild(shavedText);
    el.insertAdjacentElement("beforeend", elWithShavedText);
    styles.height = heightStyle;
    styles.maxHeight = maxHeightStyle;
  }
}
var shave_es_default = shave;

// dep:shave
var shave_default = shave_es_default;
export {
  shave_default as default
};
/**
  shave - Shave is a javascript plugin that truncates multi-line text within a html element based on set max height
  @version v2.5.10
  @link https://github.com/yowainwright/shave#readme
  @author Jeff Wainwright <yowainwright@gmail.com> (jeffry.in)
  @license MIT
**/
//# sourceMappingURL=shave.js.map
