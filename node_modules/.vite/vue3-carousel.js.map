{
  "version": 3,
  "sources": ["../vue3-carousel/dist/carousel.es.js"],
  "sourcesContent": ["/**\n * Vue 3 Carousel 0.1.28\n * (c) 2021\n * @license MIT\n */\nimport { defineComponent, ref, reactive, watch, provide, onMounted, computed, watchEffect, h, inject } from 'vue';\n\nfunction counterFactory() {\r\n    return new Proxy({ value: 0, read: 0 }, {\r\n        get(obj, prop) {\r\n            if (!(prop in obj))\r\n                return 0;\r\n            if (prop === 'read') {\r\n                return obj[prop];\r\n            }\r\n            return obj[prop]++;\r\n        },\r\n        set(obj, prop, value) {\r\n            obj[prop] = Math.max(value, 0);\r\n            return true;\r\n        },\r\n    });\r\n}\n\n/**\r\n * return a debounced version of the function\r\n * @param fn\r\n * @param delay\r\n */\r\nfunction debounce(fn, delay) {\r\n    let timerId;\r\n    return function (...args) {\r\n        if (timerId) {\r\n            clearTimeout(timerId);\r\n        }\r\n        timerId = setTimeout(() => {\r\n            fn(...args);\r\n            timerId = null;\r\n        }, delay);\r\n    };\r\n}\r\n/**\r\n * return a throttle version of the function\r\n * Throttling\r\n *\r\n */\r\nfunction throttle(fn, limit) {\r\n    let inThrottle;\r\n    return function (...args) {\r\n        const self = this;\r\n        if (!inThrottle) {\r\n            fn.apply(self, args);\r\n            inThrottle = true;\r\n            setTimeout(() => (inThrottle = false), limit);\r\n        }\r\n    };\r\n}\r\nfunction getSlides(vNode) {\r\n    var _a, _b, _c;\r\n    // Return empty array if there's any node\r\n    if (!vNode)\r\n        return [];\r\n    // Check if the Slides components are added directly without v-for (#72)\r\n    if (((_b = (_a = vNode[0]) === null || _a === void 0 ? void 0 : _a.type) === null || _b === void 0 ? void 0 : _b.name) === 'CarouselSlide')\r\n        return vNode;\r\n    return ((_c = vNode[0]) === null || _c === void 0 ? void 0 : _c.children) || [];\r\n}\n\nvar Carousel = defineComponent({\r\n    name: 'Carousel',\r\n    props: {\r\n        // count of items to showed per view\r\n        itemsToShow: {\r\n            default: 1,\r\n            type: Number,\r\n        },\r\n        // count of items to be scrolled\r\n        itemsToScroll: {\r\n            default: 1,\r\n            type: Number,\r\n        },\r\n        // control infinite scrolling mode\r\n        wrapAround: {\r\n            default: false,\r\n            type: Boolean,\r\n        },\r\n        // control snap position alignment\r\n        snapAlign: {\r\n            default: 'center',\r\n            validator(value) {\r\n                // The value must match one of these strings\r\n                return ['start', 'end', 'center', 'center-even', 'center-odd'].includes(value);\r\n            },\r\n        },\r\n        // sliding transition time in ms\r\n        transition: {\r\n            default: 300,\r\n            type: Number,\r\n        },\r\n        // an object to pass all settings\r\n        settings: {\r\n            default() {\r\n                return {};\r\n            },\r\n            type: Object,\r\n        },\r\n        // an object to store breakpoints\r\n        breakpoints: {\r\n            default: null,\r\n            type: Object,\r\n        },\r\n        // time to auto advance slides in ms\r\n        autoplay: {\r\n            default: 0,\r\n            type: Number,\r\n        },\r\n        // pause autoplay when mouse hover over the carousel\r\n        pauseAutoplayOnHover: {\r\n            default: false,\r\n            type: Boolean,\r\n        },\r\n        // slide number number of initial slide\r\n        modelValue: {\r\n            default: undefined,\r\n            type: Number,\r\n        },\r\n        // toggle mouse dragging.\r\n        mouseDrag: {\r\n            default: true,\r\n            type: Boolean,\r\n        },\r\n        // toggle mouse dragging.\r\n        touchDrag: {\r\n            default: true,\r\n            type: Boolean,\r\n        },\r\n    },\r\n    setup(props, { slots, emit }) {\r\n        var _a;\r\n        const root = ref(null);\r\n        const slides = ref([]);\r\n        const slidesBuffer = ref([]);\r\n        const slideWidth = ref(0);\r\n        const slidesCount = ref(1);\r\n        const paginationCount = ref(1);\r\n        const slidesCounter = counterFactory();\r\n        // current config\r\n        const config = reactive({});\r\n        // generate carousel configs\r\n        let defaultConfig = {};\r\n        let breakpoints = ref({});\r\n        initDefaultConfigs();\r\n        updateConfig();\r\n        // Update the carousel on props change\r\n        watch(props, () => {\r\n            initDefaultConfigs();\r\n            updateConfig();\r\n            updateSlidesData();\r\n            updateSlideWidth();\r\n        });\r\n        // slides\r\n        const currentSlide = ref((_a = config.currentSlide) !== null && _a !== void 0 ? _a : 0);\r\n        const prevSlide = ref(0);\r\n        const middleSlide = ref(0);\r\n        provide('config', config);\r\n        provide('slidesBuffer', slidesBuffer);\r\n        provide('slidesCount', slidesCount);\r\n        provide('currentSlide', currentSlide);\r\n        provide('slidesCounter', slidesCounter);\r\n        provide('paginationCount', paginationCount);\r\n        /**\r\n         * Configs\r\n         */\r\n        function initDefaultConfigs() {\r\n            // generate carousel configs\r\n            defaultConfig = Object.assign(Object.assign(Object.assign({}, props), props.settings), { currentSlide: props.modelValue });\r\n            // Set breakpoints\r\n            breakpoints = ref(Object.assign({}, defaultConfig.breakpoints));\r\n            // remove extra values\r\n            defaultConfig = Object.assign(Object.assign({}, defaultConfig), { settings: undefined, breakpoints: undefined });\r\n        }\r\n        function updateConfig() {\r\n            const breakpointsArray = Object.keys(breakpoints.value)\r\n                .map((key) => Number(key))\r\n                .sort((a, b) => +b - +a);\r\n            let newConfig = Object.assign({}, defaultConfig);\r\n            breakpointsArray.some((breakpoint) => {\r\n                const isMatched = window.matchMedia(`(min-width: ${breakpoint}px)`).matches;\r\n                if (isMatched) {\r\n                    newConfig = Object.assign(Object.assign({}, newConfig), breakpoints.value[breakpoint]);\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n            Object.keys(newConfig).forEach((key) => (config[key] = newConfig[key]));\r\n        }\r\n        const handleWindowResize = debounce(() => {\r\n            if (breakpoints.value) {\r\n                updateConfig();\r\n                updateSlidesData();\r\n            }\r\n            updateSlideWidth();\r\n        }, 16);\r\n        /**\r\n         * Setup functions\r\n         */\r\n        function updateSlideWidth() {\r\n            if (!root.value)\r\n                return;\r\n            const rect = root.value.getBoundingClientRect();\r\n            slideWidth.value = rect.width / config.itemsToShow;\r\n        }\r\n        function updateSlidesData() {\r\n            paginationCount.value = slides.value.length;\r\n            slidesCount.value = slides.value.length;\r\n            middleSlide.value = Math.ceil((slidesCount.value - 1) / 2);\r\n            currentSlide.value =\r\n                slidesCount.value <= 0 ? 0 : Math.min(slidesCount.value - 1, currentSlide.value);\r\n        }\r\n        function updateSlidesBuffer() {\r\n            const slidesArray = [...Array(slidesCount.value).keys()];\r\n            if (config.wrapAround) {\r\n                const shifts = currentSlide.value + middleSlide.value + 1;\r\n                for (let i = 0; i < shifts; i++) {\r\n                    slidesArray.push(Number(slidesArray.shift()));\r\n                }\r\n            }\r\n            slidesBuffer.value = slidesArray;\r\n        }\r\n        onMounted(() => {\r\n            if (breakpoints.value) {\r\n                updateConfig();\r\n                updateSlidesData();\r\n            }\r\n            updateSlideWidth();\r\n            if (config.autoplay > 0)\r\n                initializeAutoplay();\r\n            // @ts-ignore\r\n            window.addEventListener('resize', handleWindowResize, { passive: true });\r\n        });\r\n        /**\r\n         * Carousel Event listeners\r\n         */\r\n        let isTouch = false;\r\n        const startPosition = { x: 0, y: 0 };\r\n        const endPosition = { x: 0, y: 0 };\r\n        const dragged = reactive({ x: 0, y: 0 });\r\n        const isDragging = ref(false);\r\n        const isHover = ref(false);\r\n        const handleMouseEnter = () => {\r\n            isHover.value = true;\r\n        };\r\n        const handleMouseLeave = () => {\r\n            isHover.value = false;\r\n        };\r\n        const handleDrag = throttle((event) => {\r\n            if (!isTouch)\r\n                event.preventDefault();\r\n            endPosition.x = isTouch ? event.touches[0].clientX : event.clientX;\r\n            endPosition.y = isTouch ? event.touches[0].clientY : event.clientY;\r\n            const deltaX = endPosition.x - startPosition.x;\r\n            const deltaY = endPosition.y - startPosition.y;\r\n            dragged.y = deltaY;\r\n            dragged.x = deltaX;\r\n        }, 16);\r\n        function handleDragStart(event) {\r\n            if (!isTouch)\r\n                event.preventDefault();\r\n            isTouch = event.type === 'touchstart';\r\n            if ((!isTouch && event.button !== 0) || isSliding.value) {\r\n                return;\r\n            }\r\n            isDragging.value = true;\r\n            startPosition.x = isTouch ? event.touches[0].clientX : event.clientX;\r\n            startPosition.y = isTouch ? event.touches[0].clientY : event.clientY;\r\n            // @ts-ignore\r\n            document.addEventListener(isTouch ? 'touchmove' : 'mousemove', handleDrag);\r\n            document.addEventListener(isTouch ? 'touchend' : 'mouseup', handleDragEnd);\r\n        }\r\n        function handleDragEnd() {\r\n            isDragging.value = false;\r\n            const tolerance = Math.sign(dragged.x) * 0.4;\r\n            const draggedSlides = Math.round(dragged.x / slideWidth.value + tolerance);\r\n            let newSlide = currentSlide.value - draggedSlides;\r\n            if (!config.wrapAround)\r\n                newSlide = Math.max(Math.min(newSlide, slidesCount.value - 1), 0);\r\n            slideTo(newSlide);\r\n            dragged.x = 0;\r\n            dragged.y = 0;\r\n            // @ts-ignore\r\n            document.removeEventListener(isTouch ? 'touchmove' : 'mousemove', handleDrag);\r\n            document.removeEventListener(isTouch ? 'touchend' : 'mouseup', handleDragEnd);\r\n        }\r\n        /**\r\n         * Autoplay\r\n         */\r\n        function initializeAutoplay() {\r\n            setInterval(() => {\r\n                if (config.pauseAutoplayOnHover && isHover.value) {\r\n                    return;\r\n                }\r\n                next();\r\n            }, config.autoplay);\r\n        }\r\n        /**\r\n         * Navigation function\r\n         */\r\n        const isSliding = ref(false);\r\n        function slideTo(slideIndex, mute = false) {\r\n            if (currentSlide.value === slideIndex || isSliding.value) {\r\n                return;\r\n            }\r\n            // Wrap slide index\r\n            const lastSlideIndex = slidesCount.value - 1;\r\n            if (slideIndex > lastSlideIndex) {\r\n                return slideTo(slideIndex - slidesCount.value);\r\n            }\r\n            if (slideIndex < 0) {\r\n                return slideTo(slideIndex + slidesCount.value);\r\n            }\r\n            isSliding.value = true;\r\n            prevSlide.value = currentSlide.value;\r\n            currentSlide.value = slideIndex;\r\n            if (!mute) {\r\n                emit('update:modelValue', currentSlide.value);\r\n            }\r\n            setTimeout(() => {\r\n                if (config.wrapAround)\r\n                    updateSlidesBuffer();\r\n                isSliding.value = false;\r\n            }, config.transition);\r\n        }\r\n        function next() {\r\n            let nextSlide = currentSlide.value + config.itemsToScroll;\r\n            if (!config.wrapAround) {\r\n                nextSlide = Math.min(nextSlide, paginationCount.value - 1);\r\n            }\r\n            slideTo(nextSlide);\r\n        }\r\n        function prev() {\r\n            let prevSlide = currentSlide.value - config.itemsToScroll;\r\n            if (!config.wrapAround) {\r\n                prevSlide = Math.max(prevSlide, 0);\r\n            }\r\n            slideTo(prevSlide);\r\n        }\r\n        const nav = { slideTo, next, prev };\r\n        provide('nav', nav);\r\n        /**\r\n         * Track style\r\n         */\r\n        const slidesToScroll = computed(() => {\r\n            let output = slidesBuffer.value.indexOf(currentSlide.value);\r\n            if (config.snapAlign === 'center' || config.snapAlign === 'center-odd') {\r\n                output -= (config.itemsToShow - 1) / 2;\r\n            }\r\n            else if (config.snapAlign === 'center-even') {\r\n                output -= (config.itemsToShow - 2) / 2;\r\n            }\r\n            else if (config.snapAlign === 'end') {\r\n                output -= config.itemsToShow - 1;\r\n            }\r\n            if (!config.wrapAround) {\r\n                const max = slidesCount.value - config.itemsToShow;\r\n                const min = 0;\r\n                output = Math.max(Math.min(output, max), min);\r\n            }\r\n            return output;\r\n        });\r\n        provide('slidesToScroll', slidesToScroll);\r\n        const trackStyle = computed(() => {\r\n            const xScroll = dragged.x - slidesToScroll.value * slideWidth.value;\r\n            return {\r\n                transform: `translateX(${xScroll}px)`,\r\n                transition: `${isSliding.value ? config.transition : 0}ms`,\r\n            };\r\n        });\r\n        const slotsProps = reactive({ slideWidth, slidesCount, currentSlide });\r\n        const slotSlides = slots.default || slots.slides;\r\n        const slotAddons = slots.addons;\r\n        watchEffect(() => {\r\n            // Handel when slides added/removed\r\n            const needToUpdate = slidesCount.value !== slides.value.length;\r\n            const currentSlideUpdated = props.modelValue !== undefined && currentSlide.value !== props.modelValue;\r\n            if (currentSlideUpdated) {\r\n                slideTo(Number(props.modelValue), true);\r\n            }\r\n            if (needToUpdate) {\r\n                updateSlidesData();\r\n                updateSlidesBuffer();\r\n            }\r\n            if (slidesCounter.read) {\r\n                slidesCounter.value = slides.value.length - 1;\r\n            }\r\n        });\r\n        updateSlidesBuffer();\r\n        return () => {\r\n            const slidesElements = getSlides(slotSlides === null || slotSlides === void 0 ? void 0 : slotSlides(slotsProps));\r\n            const addonsElements = (slotAddons === null || slotAddons === void 0 ? void 0 : slotAddons(slotsProps)) || [];\r\n            slides.value = slidesElements;\r\n            // Bind slide order\r\n            slidesElements.forEach((el, index) => (el.props.index = index));\r\n            const trackEl = h('ol', {\r\n                class: 'carousel__track',\r\n                style: trackStyle.value,\r\n                onMousedown: config.mouseDrag ? handleDragStart : null,\r\n                onTouchstart: config.touchDrag ? handleDragStart : null,\r\n            }, slidesElements);\r\n            const viewPortEl = h('div', { class: 'carousel__viewport' }, trackEl);\r\n            return h('section', {\r\n                ref: root,\r\n                class: 'carousel',\r\n                'aria-label': 'Gallery',\r\n                onMouseenter: handleMouseEnter,\r\n                onMouseleave: handleMouseLeave,\r\n            }, [viewPortEl, addonsElements]);\r\n        };\r\n    },\r\n});\n\nconst icons = {\r\n    arrowUp: 'M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z',\r\n    arrowDown: 'M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z',\r\n    arrowRight: 'M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z',\r\n    arrowLeft: 'M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z',\r\n};\n\nconst Icon = (props) => {\r\n    const iconName = props.name;\r\n    if (!iconName || typeof iconName !== 'string') {\r\n        return;\r\n    }\r\n    const path = icons[iconName];\r\n    const pathEl = h('path', { d: path });\r\n    props.title || iconName;\r\n    const titleEl = h('title', null, iconName);\r\n    return h('svg', {\r\n        class: 'carousel__icon',\r\n        viewBox: '0 0 24 24',\r\n        role: 'img',\r\n    }, [titleEl, pathEl]);\r\n};\r\nIcon.props = { name: String, title: String };\n\nconst Navigation = (props, { slots, attrs }) => {\r\n    const { next: slotNext, prev: slotPrev } = slots;\r\n    const nav = inject('nav', {});\r\n    const prevButton = h('button', { type: 'button', class: ['carousel__prev', attrs === null || attrs === void 0 ? void 0 : attrs.class], onClick: nav.prev }, (slotPrev === null || slotPrev === void 0 ? void 0 : slotPrev()) || h(Icon, { name: 'arrowLeft' }));\r\n    const nextButton = h('button', { type: 'button', class: ['carousel__next', attrs === null || attrs === void 0 ? void 0 : attrs.class], onClick: nav.next }, (slotNext === null || slotNext === void 0 ? void 0 : slotNext()) || h(Icon, { name: 'arrowRight' }));\r\n    return [prevButton, nextButton];\r\n};\n\nvar Slide = defineComponent({\r\n    name: 'CarouselSlide',\r\n    props: {\r\n        index: {\r\n            type: Number,\r\n            default: 1,\r\n        },\r\n    },\r\n    setup(props, { slots }) {\r\n        const config = inject('config', reactive({}));\r\n        const slidesBuffer = inject('slidesBuffer', ref([]));\r\n        const slidesCounter = inject('slidesCounter');\r\n        const currentSlide = inject('currentSlide', ref(0));\r\n        const slidesToScroll = inject('slidesToScroll', ref(0));\r\n        const slideOrder = slidesCounter.value;\r\n        const wrapOrder = ref(slideOrder);\r\n        if (config.wrapAround) {\r\n            updateOrder();\r\n            watchEffect(updateOrder);\r\n        }\r\n        function updateOrder() {\r\n            wrapOrder.value = slidesBuffer.value.indexOf(slideOrder);\r\n        }\r\n        const slideStyle = computed(() => {\r\n            const items = config.itemsToShow;\r\n            const width = `${(1 / items) * 100}%`;\r\n            return {\r\n                width,\r\n                order: wrapOrder.value.toString(),\r\n            };\r\n        });\r\n        const isActive = () => props.index === currentSlide.value;\r\n        const isVisible = () => {\r\n            const min = Math.ceil(slidesToScroll.value);\r\n            const max = Math.floor(slidesToScroll.value + config.itemsToShow);\r\n            const current = slidesBuffer.value.slice(min, max);\r\n            return current.includes(props.index);\r\n        };\r\n        const isPrev = () => props.index === slidesBuffer.value[Math.ceil(slidesToScroll.value) - 1];\r\n        const isNext = () => props.index ===\r\n            slidesBuffer.value[Math.floor(slidesToScroll.value + config.itemsToShow)];\r\n        return () => {\r\n            var _a;\r\n            return h('li', {\r\n                style: slideStyle.value,\r\n                class: {\r\n                    carousel__slide: true,\r\n                    'carousel__slide--active': isActive(),\r\n                    'carousel__slide--visible': isVisible(),\r\n                    'carousel__slide--prev': isPrev(),\r\n                    'carousel__slide--next': isNext(),\r\n                },\r\n            }, (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots));\r\n        };\r\n    },\r\n});\n\nconst Pagination = () => {\r\n    inject('slidesCount', ref(1));\r\n    const paginationCount = inject('paginationCount', ref(1));\r\n    const currentSlide = inject('currentSlide', ref(1));\r\n    const nav = inject('nav', {});\r\n    function handleButtonClick(slideNumber) {\r\n        nav.slideTo(slideNumber);\r\n    }\r\n    const children = [];\r\n    for (let slide = 0; slide < paginationCount.value; slide++) {\r\n        const button = h('button', {\r\n            type: 'button',\r\n            class: {\r\n                'carousel__pagination-button': true,\r\n                'carousel__pagination-button--active': currentSlide.value === slide,\r\n            },\r\n            onClick: () => handleButtonClick(slide),\r\n        });\r\n        const item = h('li', { class: 'carousel__pagination-item', key: slide }, button);\r\n        children.push(item);\r\n    }\r\n    return h('ol', { class: 'carousel__pagination' }, children);\r\n};\n\nexport { Carousel, Icon, Navigation, Pagination, Slide };\n"],
  "mappings": "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",
  "names": []
}
